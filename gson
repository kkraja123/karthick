import android.util.Log;

import com.android.volley.AuthFailureError;
import com.android.volley.NetworkResponse;
import com.android.volley.ParseError;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.toolbox.HttpHeaderParser;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;

import java.io.UnsupportedEncodingException;
import java.util.Map;

/**
 * Created by platosystechnologies on 18/08/17.
 */

public class GsonRequest<T> extends Request<T> {
    private Object dataIn;

    private Gson mGson = new Gson();
    private Class<T> clazz;
    private Map<String, String> headers;
    private Map<String, String> params;
    private Response.Listener<T> listener;


    /**
     * Make a GET request and return a parsed object from JSON.
     *
     * @param url   URL of the request to make
     * @param clazz Relevant class object, for Gson's reflection
     */


    /**
     * Make a POST request and return a parsed object from JSON.
     *  @param url   URL of the request to make
     * @param clazz Relevant class object, for Gson's reflection
     * @param listener
     */


    public GsonRequest(int method, String url,Class<T> clazz, Map<String, String> headers, Map<String, String> params,
                       Response.Listener<T> listener, Response.ErrorListener errorListener) {
        super(method, url, errorListener);
        this.dataIn = dataIn;
        this.clazz = clazz;
        this.headers = null;
        this.params=params;
        this.listener = listener;
        mGson = new Gson();

    }

    @Override
    public Map<String, String> getHeaders() throws AuthFailureError {
        return headers != null ? headers : super.getHeaders();
    }


//    @Override
//    public String getBodyContentType() {
//        return "application/json";
//    }

    @Override
    protected void deliverResponse(T response) {
        listener.onResponse(response);
    }

//    @Override
//    public byte[] getBody() throws AuthFailureError {
//        return mGson.toJson(dataIn).getBytes();
//    }

    @Override
    protected Map<String, String> getParams() throws AuthFailureError {
        return params;
    }

    @Override
    protected Response<T> parseNetworkResponse(NetworkResponse response) {

        try {
            String json = new String(
                    response.data, HttpHeaderParser.parseCharset(response.headers));

          //  Log.e("response", response + "" + json);

            return Response.success(
                    mGson.fromJson(json, clazz), HttpHeaderParser.parseCacheHeaders(response));
        } catch (UnsupportedEncodingException e) {
            return Response.error(new ParseError(e));
        } catch (JsonSyntaxException e) {
            return Response.error(new ParseError(e));
        }
    }
}
